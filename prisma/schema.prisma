// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== ENUMS ==========

enum ResourceType {
  VIDEO
  PDF
  LINK
  ARTICLE
}

enum NoteFormat {
  PDF
  DOCX
  TXT
  MARKDOWN
}

enum MessageRole {
  USER
  AI
}

// ========== CORE & NEXTAUTH ENTITIES ==========

// Adapted for NextAuth compatibility
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Optional for OAuth providers
  isOnboarded   Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Gamification
  xp     Int     @default(0)
  streak Int     @default(0)
  badges Badge[]

  // AI Persona Preference
  persona String? // e.g., "Einstein", "Steve Jobs"

  verificationToken       String?
  verificationTokenExpiry DateTime?

  // Relations from your original schema
  createdModules      Module[]
  moduleProgress      UserModule[]
  quizAttempts        QuizAttempt[]
  flashcardProgress   UserFlashcard[]
  notes               Note[]
  projects            Project[]
  aiConversations     AiConversation[]
  chatRoomMemberships ChatRoomMember[]
  sentChatMessages    ChatMessage[]
  studySessions       StudySession[]
  todaysGoals         TodaysGoal[]
  communityMembers    CommunityMember[]
  communityMessages   CommunityMessage[]
  sentInvites        CommunityInvite[] @relation("Inviter")
  receivedInvites    CommunityInvite[] @relation("Invitee")

  // NextAuth Required Relations
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Badge {
  id      String  @id @default(cuid())
  name    String  @unique
  iconUrl String?
  users   User[]
}

// ========== LEARNING CONTENT ==========

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  creatorId       String?
  creator         User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  steps           Step[]
  resources       Resource[]
  quizzes         Quiz[]
  flashcards      Flashcard[]
  userProgress    UserModule[]
  notes           Note[]
  projects        Project[]
  chatRoom        ChatRoom?
  aiConversations AiConversation[]
  studySessions   StudySession[]
}

model Step {
  id      String @id @default(cuid())
  title   String
  content String
  order   Int

  // Relations
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([moduleId, order])
}

model Resource {
  id   String       @id @default(cuid())
  type ResourceType
  url  String

  // Relations
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

// ========== QUIZZES ==========

model Quiz {
  id    String @id @default(cuid())
  title String

  // Relations
  moduleId  String
  module    Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions Question[]
  attempts  QuizAttempt[]
}

model Question {
  id          String  @id @default(cuid())
  text        String
  explanation String?

  // Relations
  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options Option[]
}

// A more robust structure for question options
model Option {
  id        String  @id @default(cuid())
  text      String
  isCorrect Boolean @default(false)

  // Relations
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// Renamed from UserQuiz to allow for multiple attempts
model QuizAttempt {
  id        String   @id @default(cuid())
  score     Float // Percentage score, e.g., 85.5
  createdAt DateTime @default(now())

  // Relations
  userId String
  quizId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId, quizId]) // Index for querying a user's attempts on a quiz
}

// ========== FLASHCARDS & SRS ==========

model Flashcard {
  id       String @id @default(cuid())
  question String
  answer   String

  // Relations
  moduleId     String
  module       Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  userProgress UserFlashcard[]
}

model UserFlashcard {
  id         String   @id @default(cuid())
  // Spaced Repetition System (SRS) fields
  srsLevel   Int      @default(0)
  nextReview DateTime

  // Relations
  userId      String
  flashcardId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  @@unique([userId, flashcardId])
}

// ========== USER-GENERATED CONTENT & PROGRESS ==========

model UserModule {
  id        String  @id @default(cuid())
  progress  Float   @default(0) // Percentage completed e.g., 75.0
  completed Boolean @default(false)
  deleted   Boolean @default(false) // Track if user has "deleted" this module for themselves

  // Relations
  userId   String
  moduleId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
}

model Note {
  id        String     @id @default(cuid())
  title     String
  content   String
  format    NoteFormat
  createdAt DateTime   @default(now())

  // Relations
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId String?
  module   Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())

  // Relations
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId String?
  module   Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)
}

// ========== AI & INTERACTION ==========

// New model to group conversation messages
model AiConversation {
  id        String   @id @default(cuid())
  title     String? // e.g., "Questions about Module 1"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages AiMessage[]
  moduleId String?
  module   Module?     @relation(fields: [moduleId], references: [id], onDelete: SetNull)

  @@index([userId])
}

// Renamed from TutorConversation for clarity
model AiMessage {
  id        String      @id @default(cuid())
  role      MessageRole // "USER" or "AI"
  content   String      @db.Text
  createdAt DateTime    @default(now())

  // Relations
  conversationId String
  conversation   AiConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}

// ========== COMMUNITY & CHAT ==========

model Community {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  isPrivate   Boolean  @default(false) // New field for public/private communities
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members  CommunityMember[]
  messages CommunityMessage[]
  invites  CommunityInvite[] // New relation for invites
}

model CommunityMember {
  role     String   @default("MEMBER") // e.g., "MEMBER", "ADMIN", "MODERATOR"
  joinedAt DateTime @default(now())

  // Relations & Composite Key
  userId      String
  communityId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@id([userId, communityId])
}

// New model for community invites
model CommunityInvite {
  id          String   @id @default(cuid())
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())
  expiresAt   DateTime // Invites expire after 7 days
  
  // Relations
  inviterId   String
  inviteeId   String
  communityId String
  inviter     User      @relation("Inviter", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee     User      @relation("Invitee", fields: [inviteeId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@index([inviteeId, status])
  @@index([communityId, status])
  @@index([expiresAt]) // For cleanup queries
}

model CommunityMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  expiresAt DateTime // Auto-deletion after 5 days

  // Relations
  authorId    String
  communityId String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@index([communityId, createdAt])
  @@index([expiresAt]) // For cleanup queries
}

model ChatRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  moduleId String? @unique
  module   Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)

  // Relations
  members  ChatRoomMember[]
  messages ChatMessage[]
}

model ChatRoomMember {
  role     String   @default("MEMBER") // e.g., "MEMBER", "ADMIN"
  joinedAt DateTime @default(now())

  // Relations & Composite Key
  userId String
  roomId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([userId, roomId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  // Relations
  authorId String
  roomId   String
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  room     ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId, createdAt])
}

// ========== STUDY TRACKING & GOALS ==========

model StudySession {
  id        String   @id @default(cuid())
  startTime DateTime @default(now())
  endTime   DateTime?
  duration  Int?     // Duration in minutes
  moduleId  String?  // Optional - if studying a specific module
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)

  @@index([userId, startTime])
}

model TodaysGoal {
  id        String   @id @default(cuid())
  task      String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  date      DateTime @default(now()) // The date this goal is for
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}
